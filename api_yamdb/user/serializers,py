from django.contrib.auth.tokens import default_token_generator as dtg
from django.shortcuts import get_object_or_404
from rest_framework.serializers import (
    CharField, EmailField, ModelSerializer, Serializer, ValidationError)

from user.models import User
from user.validators import valid_username


class UserSerializer(ModelSerializer):

    class Meta:
        model = User
        fields = (
            'username', 'email', 'first_name', 'last_name', 'bio', 'role',
        )


class UserCreationSerializer(Serializer):
    email = EmailField(required=True)
    username = CharField(validators=[valid_username], required=True)

    def validate(self, name):
        return name


class UserAccessTokenSerializer(Serializer):
    username = CharField(required=True)
    confirmation_code = CharField(required=True)

    def validate(self, data):
        user = get_object_or_404(User, username=data['username'])
        if not dtg.check_token(user, data['confirmation_code']):
            raise ValidationError(
                {'confirmation_code': 'Неверный код подтверждения'}
            )
        return data
